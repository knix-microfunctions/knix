#   Copyright 2021 The KNIX Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# Default values for MicroFunctions.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

#------------------------------------------------------------------------------
# MicroFunction management workflow
#------------------------------------------------------------------------------
imageRepo: "registry.kube-system.svc.cluster.local:5000"
apiKey: "abcdef"
#imageRepo: "localhost:5000" # kubespray deployment
manager:
  #httpProxy: "http://192.109.76.93:8080"
  httpsProxy: "http://192.109.76.93:8080"
  #httpGatewayPort: 31380 # kubespray deployment
  nameOverride: "microfunctions"
  newWorkflow:
    hpa:
      targetCPUUtilizationPercentage: 80
      minReplicas: 1
      maxReplicas: 1
  setup:
    imagePath: "/microfn/management"
    # imageTag: "latest" (default .Chart.AppVersion)
    imagePullPolicy: "Always"
    imagePullSecrets: []
    initialDelaySeconds: 60
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 1Gi
  sandbox:
    imagePathPython: "/microfn/sandbox"
    imagePathJava: "/microfn/sandbox_java"
    logLevel: "info"
    # imageTag: "latest" (default .Chart.AppVersion)
    imagePullPolicy: "Always"
    env:
      name: API_TOKEN
      value: "123test"
    imagePullSecrets: []
    resources:
      limits:
        cpu: 1
        memory: 4Gi
      requests:
        cpu: 1
        memory: 2Gi
  managementSandbox:
    resources:
      limits:
        cpu: 4
        memory: 4Gi
      requests:
        cpu: 2
        memory: 2Gi
  createServiceAccounts: true
  nodeSelector: {}
  tolerations: {}

#------------------------------------------------------------------------------
# MicroFunction Datalayer
#------------------------------------------------------------------------------
datalayer:
  replicas: 1 # kubespray deployment
  #replicas: 3
  imagePath: "/microfn/datalayer"
  # imageTag: "latest" (default .Chart.AppVersion)
  imagePullPolicy: "Always"
  imagePullSecrets: []
  port: 4998
  initialDelaySeconds: 0
  javaOpts: "-Xmx4096m"
  resources:
    limits:
      cpu: 1
      memory: 8Gi
    requests:
      cpu: 1
      memory: 8Gi
  nodeSelector: {}
  tolerations: {}


#------------------------------------------------------------------------------
# Riak global data storage
#------------------------------------------------------------------------------
riak:
  replicas: 1 # kubespray deployment
  #replicas: 3
  imagePath: "/microfn/riak"
  # imageTag: "latest" (default .Chart.AppVersion)
  imagePullPolicy: "Always"
  imagePullSecrets: []
  nameOverride: "microfunctions-riak"
  ClientPortHttp: 8098
  ClientPortProtobuf: 8087
  resources:
    limits:
      cpu: 1
      memory: 8Gi
    requests:
      cpu: 1
      memory: 8Gi
  DataStorage: 8Gi
  DataStorageClass: manual
  ClusterName: "riak"
  WaitForErlang: 180
  ErlangDistributionPortRangeMinimum: 6000
  ErlangDistributionPortRangeMaximum: 6999
  LogConsoleLevel: "debug"
  StorageBackend: "leveldb"
  # Has to fit in the memory configuration alongside Riak (default setting claims half the pod memory)
  LevelDbMaximumMemory: 4294967296
  AntiEntropy: "passive"
  # Should be <= resources.limits.cpu
  ErlangSchedulersTotal: 2
  ErlangSchedulersOnline: 2
  ErlangSchedulersForceWakeupInterval: 500
  ErlangSchedulersCompactionOfLoad: "false"
  nodeSelector: {}
  tolerations: {}

#------------------------------------------------------------------------------
# ElasticSearch for all components and MicroFunction logs
#------------------------------------------------------------------------------
elastic:
  imageRepo: "docker.elastic.co"
  imagePath: "/elasticsearch/elasticsearch-oss"
  imageTag: "7.3.2"
  imagePullSecrets: []
  clientPort: 9200
  masterPort: 9300
  resources:
    limits:
      cpu: 4
      memory: 4Gi
    requests:
      cpu: 2
      memory: 2Gi
  nodeSelector: {}
  tolerations: {}

#------------------------------------------------------------------------------
# Nginx with MicroFunctions web GUI and Storage API
#------------------------------------------------------------------------------
nginx:
  Replicas: 1
  nameOverride: "microfunctions-nginx"
  # Knative Serving creates an FQDN for the management kservice "wf-{{ .Release.Name }}-management".
  # In most installations, it would be {ksvc}.{namespace}.example.com
  # Please use --set nginx.managementService to specify the FQDN that the service will get from your Knative setup
  # _helpers.tpl would default it to wf-mfn1-management.knix.example.com
  #managementService: wf-mfn1-management.knix.example.com
  managementService: wf-mfn-management.default.192.168.8.161.xip.io
  imagePath: "/microfn/nginx"
  # imageTag: "latest" (default .Chart.AppVersion)
  httpPort: 32180
  location: "/"
# If httpsPort is defined, the Base64 encoded certificate authority, certificate and key are required to serve securely from the Pod
#  httpsPort: 32443
#  httpsCa: <base64-encoded certificate authority cert>
#  httpsCert: <base64-encoded cert>
#  httpsKey: <base64-encoded key>
  imagePullPolicy: "Always"
  imagePullSecrets: []
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 1Gi
  nodeSelector: {}
  tolerations: {}

#------------------------------------------------------------------------------
# TriggersFrontend
#------------------------------------------------------------------------------
triggersFrontend:
  imagePath: "/microfn/triggers_frontend"
  # imageTag: "latest" (default .Chart.AppVersion)
  imagePullPolicy: "Always"
  imagePullSecrets: []
  nameOverride: "microfunctions-triggers-frontend"
  httpPort: 4997
  replicas: 3
  statusReportIntervalSec: 30
  resources:
    limits:
      cpu: 1
      memory: 8Gi
    requests:
      cpu: 1
      memory: 1Gi
  nodeSelector: {}
  tolerations: {}