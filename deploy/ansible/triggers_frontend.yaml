#   Copyright 2020 The KNIX Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---
    # run as follows: ansible-playbook -K -e "@settings.json" triggers_frontend.yaml
    # or as: ./run.sh triggers_frontend.yaml
  - hosts: triggers_frontend
    
    vars:
      triggers_frontend_dist: "../../TriggersFrontend/target/release"
      triggers_frontend_binary: "TriggersFrontend"
  
      install_dir: "{{ mfn_server_installation_folder }}/triggers_frontend"
  
      triggers_frontend_service_name: mfn-triggers-frontend
      triggers_frontend_service_script: "/lib/systemd/system/{{ triggers_frontend_service_name }}.service"
      triggers_frontend_port: "4997"
      triggers_frontend_management_update_interval_sec: "30"
      management_url: "http://{{ hostvars[groups['management'][0]].ansible_ssh_host }}:{{ management_service_exposed_port }}"
  
    tasks:
  
    - debug:
        msg: 
          - inventory_hostname = {{ inventory_hostname }}
          - ansible_ssh_host = {{ ansible_ssh_host }}
          - install_dir = {{ install_dir }}    # e.g. /opt/knix
          - "triggers_frontend package = {{ triggers_frontend_dist }}/{{ triggers_frontend_binary }}"
          - triggers_frontend_port = {{ triggers_frontend_port }}
          - management_url = {{ management_url }}
  
    - name: stop service
      systemd:
        name: "{{ triggers_frontend_service_name }}"
        state: stopped
      ignore_errors: yes
  
    - name: create installation directory
      file: path={{ install_dir }} state=directory
  
    - name: copy triggers_frontend binary
      copy:
        mode: '775'
        src: "{{ triggers_frontend_dist }}/{{ triggers_frontend_binary }}"
        dest: "{{ install_dir }}/"
  
    #- name: provide separate log configuration
    #  copy:
    #    dest: "{{ install_dir }}/log4j2.properties"
    #    src: "{{ datalayer_dist }}/classes/log4j2.properties"
  
    #- name: change log folder for bare metal installation
    #  replace:
    #    path: "{{ install_dir }}/log4j2.properties"
    #    regexp: '^(appender.rolling.file\w+) = (\S+)$'
    #    replace: '\1 = ../\2'
  
    - name: create run script
      copy:
        mode: '775'
        dest: "{{ install_dir }}/run_triggers_frontend.sh"
        content: |
          #!/bin/sh
          RUST_BACKTRACE=1 RUST_LOG=${TRIGGERS_FRONTEND_LOG_LEVEL:-"info"} TRIGGERS_FRONTEND_PORT=${TRIGGERS_FRONTEND_PORT:-"4997"} MANAGEMENT_URL=${MANAGEMENT_URL:-"http://httpbin.org/post"} MANAGEMENT_ACTION=${MANAGEMENT_ACTION:-"triggersFrontendStatus"} MANAGEMENT_UPDATE_INTERVAL_SEC=${MANAGEMENT_UPDATE_INTERVAL_SEC:-"30"} HOST_IP=${HOST_IP:-`hostname -i | awk '{print $1}'`} {{ install_dir }}/{{ triggers_frontend_binary }} > ../logs/triggers_frontend.log 2>&1
  
    - name: create service script
      copy:
        dest: "{{ triggers_frontend_service_script }}"
        content: |
          [Unit]
          Description=Microfunctions Triggers Frontend
          After=network.target
          [Service]
          Type=simple
          WorkingDirectory={{ install_dir }}
          Environment=TRIGGERS_FRONTEND_PORT={{ triggers_frontend_port }}
          Environment=MANAGEMENT_URL={{ management_url }}
          Environment=MANAGEMENT_UPDATE_INTERVAL_SEC={{ triggers_frontend_management_update_interval_sec }}
          ExecStart={{ install_dir }}/run_triggers_frontend.sh
          [Install]
          WantedBy=multi-user.target
  
    - name: systemd install, start the service, and enable datalayer service at boot
      systemd:
        daemon_reload: yes
        name: "{{ triggers_frontend_service_name }}"
        enabled: true
        state: restarted
      when: start_at_boot|bool
  
    - name: systemd install, start the service, and disable datalayer service at boot
      systemd:
        daemon_reload: yes
        name: "{{ triggers_frontend_service_name }}"
        enabled: false
        state: restarted
      when: not start_at_boot|bool
  
    - name: create start script
      copy:
        mode: '775'
        dest: "{{ install_dir }}/start.sh"
        content: |
          #!/bin/sh
          sudo systemctl start {{ triggers_frontend_service_name }}
          {{ mfn_server_installation_folder }}/wait-for-it.sh {{ ansible_ssh_host }}:{{ triggers_frontend_port }} -t 60
  
    - name: create stop script
      copy:
        mode: '775'
        dest: "{{ install_dir }}/stop.sh"
        content: |
          #!/bin/sh
          sudo systemctl stop {{ triggers_frontend_service_name }}

    - name: wait for triggers frontend
      shell: "{{ mfn_server_installation_folder }}/wait-for-it.sh {{ ansible_ssh_host }}:{{ triggers_frontend_port }} -t 60"
      register: wait_result

    - name: waiting for result
      debug:
        msg:
          - "{{ wait_result.stderr_lines[-1] }}"
