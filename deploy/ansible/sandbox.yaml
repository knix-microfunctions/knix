#   Copyright 2020 The KNIX Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---
  # run as follows: ansible-playbook -K -e "@settings.json" init_once.yml
  # or as: ./run.sh init_once.yml
- hosts: all

  vars:
    sandbox_deployment_package_directory: "../../Sandbox"
    sandbox_deployment_package_name: "sandbox_deployment_package.tar.gz"
    container_dir: "../"
    container_image: "sandbox.tar"
    container_image_java: "sandbox_java.tar"
    container_tag: "microfn/sandbox"
    container_java_tag: "microfn/sandbox_java"
    install_dir: "{{ mfn_server_installation_folder }}/sandbox"
    riak_connect: "{{ hostvars[groups['riak'][0]].ansible_ssh_host }}:8087"

  tasks:
  - debug:
      msg:
      - inventory_hostname = {{ inventory_hostname }}
      - ansible_ssh_host = {{ ansible_ssh_host }}
      - mfn_server_installation_folder = {{ mfn_server_installation_folder }}
      - sandbox deployment directory = {{ sandbox_deployment_package_directory }}
      - sandbox deployment package name = {{ sandbox_deployment_package_name }}
      - container tag = {{ container_tag }}
      - container_java_tag = {{ container_java_tag }}
      - container image = {{ container_image }}
      - container image_java = {{ container_image_java }}
      - sandbox installation directory {{ install_dir }}
      - riak_connect = {{ riak_connect }}

  - name: get http_proxy
    shell: "su - -c 'echo $http_proxy'"
    become: true
    register: http_proxy

  - name: get https_proxy
    shell: "su - -c 'echo $http_proxy'"
    become: true
    register: https_proxy

  - name: get no_proxy
    shell: "su - -c 'echo $no_proxy'"
    become: true
    register: no_proxy

  - set_fact:
      http_proxy: "{{ http_proxy.stdout }}"
      https_proxy: "{{ https_proxy.stdout }}"
      no_proxy: "{{ no_proxy.stdout }}"

  - debug:
      msg:
      - http_proxy = {{ http_proxy }}
      - https_proxy = {{ https_proxy }}
      - no_proxy = {{ no_proxy }}

  #################
  - name: create sandbox folder
    file: path="{{ install_dir }}" state=directory

  # Container Image: copy to host then build
  - name: extract sandbox deployment package to host install directory
    unarchive:
      src: "{{ sandbox_deployment_package_directory }}/{{ sandbox_deployment_package_name }}"
      dest: "{{ install_dir }}/"

  - name: build sandbox on host with proxy configuration
    command: docker -D -l debug build --network host --build-arg HTTP_PROXY=${HTTP_PROXY} --build-arg HTTPS_PROXY=${HTTPS_PROXY} --build-arg http_proxy=${HTTP_PROXY} --build-arg https_proxy=${HTTPS_PROXY} -t "{{ container_tag }}" -f Dockerfile .
    args:
      chdir: "{{ install_dir }}/"
    environment:
      http_proxy: "{{ http_proxy }}"
      https_proxy: "{{ https_proxy }}"
      HTTP_PROXY: "{{ http_proxy }}"
      HTTPS_PROXY: "{{ https_proxy }}"
    when: http_proxy != "" or https_proxy != ""

  - name: build sandbox on host without proxy configuration
    command: docker -D -l debug build --network host -t "{{ container_tag }}" -f Dockerfile .
    args:
      chdir: "{{ install_dir }}/"
    when: http_proxy == "" and https_proxy == ""

  - name: build sandbox (java) on host with proxy configuration
    command: docker -D -l debug build --network host --build-arg HTTP_PROXY=${HTTP_PROXY} --build-arg HTTPS_PROXY=${HTTPS_PROXY} --build-arg http_proxy=${HTTP_PROXY} --build-arg https_proxy=${HTTPS_PROXY} -t "{{ container_java_tag }}" -f Dockerfile_java .
    args:
      chdir: "{{ install_dir }}/"
    environment:
      http_proxy: "{{ http_proxy }}"
      https_proxy: "{{ https_proxy }}"
      HTTP_PROXY: "{{ http_proxy }}"
      HTTPS_PROXY: "{{ https_proxy }}"
    when: http_proxy != "" or https_proxy != ""

  - name: build sandbox (java) on host without proxy configuration
    command: docker -D -l debug build --network host -t "{{ container_java_tag }}" -f Dockerfile_java .
    args:
      chdir: "{{ install_dir }}/"
    when: http_proxy == "" and https_proxy == ""

  #################
  # Container Image Alternative: build locally, then distribute by copying and loading
  #
  #- name: build sandbox.tar container image file locally
  #  command: make sandbox.tar
  #  args:
  #    chdir: "{{ container_dir }}"
  #  delegate_to: 127.0.0.1
  #  run_once: true
  #- name: sync sandbox container image
  #  synchronize:
  #    src: "{{ container_dir }}/{{ container_image }}"
  #    dest: "{{ install_dir }}/"
  #- name: load sandbox container image
  #  shell: >
  #    docker -D load -i {{ install_dir }}/{{ container_image }}

  #- name: build sandbox_java.tar container image file locally
  #  command: make sandbox_java.tar
  #  args:
  #    chdir: "{{ container_dir }}"
  #  delegate_to: 127.0.0.1
  #  run_once: true
  #- name: sync sandbox_java.tar container image file
  #  synchronize:
  #    src: "{{ container_dir }}/{{ container_image_java }}"
  #    dest: "{{ install_dir }}/"
  #- name: load sandbox (java) container image
  #  shell: >
  #    docker -D load -i {{ install_dir }}/{{ container_image_java }}

  # Add the host to available hosts
  - name: copy available_hosts script
    copy:
      src: "./scripts/available_hosts.py"
      dest: "{{ install_dir }}/"

  - name: create .env file
    copy:
      dest: "{{ install_dir }}/.env"
      content: |
        MFN_HOSTNAME={{ inventory_hostname }}
        RIAK_CONNECT={{ riak_connect }}
        http_proxy={{ http_proxy }}
        https_proxy={{ https_proxy }}
        no_proxy={{ no_proxy }}
        HTTP_PROXY={{ http_proxy }}
        HTTPS_PROXY={{ https_proxy }}
      mode: '0755'

  - name: create available_hosts.sh
    copy:
      dest: "{{ install_dir }}/available_hosts.sh"
      content: |
        #!/bin/sh
        set -x
        cd {{ install_dir }}
        cat <<END >>dockerrun.sh
        set -x
        pip3 install --upgrade pip
        pip3 install riak
        python3 available_hosts.py add
        END
        chmod 775 dockerrun.sh
        docker run -i --rm --network host --ulimit nofile=262144:262144 --env-file .env -v "$(pwd)":/code -w /code python:3.6 bash -c './dockerrun.sh'
        rm dockerrun.sh
        cd -
      mode: '0775'

  - name: run available_hosts.sh script
    shell: ./available_hosts.sh
    args:
      chdir: "{{ install_dir }}"
    environment:
      MFN_HOSTNAME: "{{ inventory_hostname }}"
      RIAK_CONNECT: "{{ riak_connect }}"
      http_proxy: "{{ http_proxy }}"
      https_proxy: "{{ https_proxy }}"
      no_proxy: "{{ no_proxy }}"
      HTTP_PROXY: "{{ http_proxy }}"
      HTTPS_PROXY: "{{ https_proxy }}"
    register: availablehosts

  - debug:
      msg:
      - "{{ availablehosts.stdout }}"
