#   Copyright 2020 The KNIX Authors
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

---
  # run as follows: ansible-playbook -K -e "@settings.json" fluentbit.yml
  # or as: ./run.sh fluentbit.yml
- hosts: all
  
  vars:
    fluentbit_dir: "../../LoggingService/fluent-bit"
    install_dir: "{{ mfn_server_installation_folder }}/fluentbit"
    conf_dir: "{{ install_dir }}/conf"
    elasticsearch_host: "{{ hostvars[groups['elasticsearch'][0]].ansible_ssh_host }}"
    elasticsearch_port: 9200
    service_name: mfn-fluentbit
    service_script: "/lib/systemd/system/{{ service_name }}.service"
    default_logdir: "{{ mfn_server_installation_folder }}/logs"
    datalayer_logfile: "{{ default_logdir }}/datalayer.log"
    datalayer_tagname: "dl_{{ inventory_hostname }}"
    datalayer_indexname: "mfndl"
    datalayer_parsername: "mfnjavalog"
    nginx_logdir: "{{ mfn_server_installation_folder }}/nginx"
    nginx_access_logfile: "{{ nginx_logdir }}/nginx_access.log"
    nginx_tagname: "nx_{{ inventory_hostname }}"
    nginx_indexname: "mfnnx"
    nginx_parsername: "mfnnginxlog"
    nginx_host: "{{ groups['nginx'][0] }}"

  tasks:

  - name: get http_proxy
    shell: "su - -c 'echo $http_proxy'"
    register: http_proxy

  - name: get https_proxy
    shell: "su - -c 'echo $https_proxy'"
    register: https_proxy

  - name: get no_proxy
    shell: "su - -c 'echo $no_proxy'"
    register: no_proxy

  - set_fact:
      http_proxy: "{{ http_proxy.stdout }}"
      https_proxy: "{{ https_proxy.stdout }}"
      no_proxy: "{{ no_proxy.stdout }}"

  - debug:
      msg: 
      - inventory_hostname = {{ inventory_hostname }}
      - ansible_ssh_host = {{ ansible_ssh_host }}
      - mfn_server_installation_folder = {{ mfn_server_installation_folder }}    # e.g. /opt/mfn
      - install_dir = {{ install_dir }}
      - conf_dir = {{ conf_dir }}
      - fluentbit_dir = {{ fluentbit_dir }}
      - elasticsearch_host = {{ elasticsearch_host }}
      - elasticsearch_port = {{ elasticsearch_port }}
      - service_name = {{ service_name }}
      - service_script = {{ service_script }}
      - default_logdir = {{ default_logdir }}
      - datalayer_logfile = {{ datalayer_logfile }}
      - datalayer_tagname = {{ datalayer_tagname }}
      - datalayer_indexname = {{ datalayer_indexname }}
      - datalayer_parsername = {{ datalayer_parsername }}
      - nginx_logdir = {{ nginx_logdir }}
      - nginx_access_logfile = {{ nginx_access_logfile }}
      - nginx_tagname = {{ nginx_tagname }}
      - nginx_indexname = {{ nginx_indexname }}
      - nginx_parsername = {{ nginx_parsername }}
      - nginx_host = {{ nginx_host }}
      - http_proxy = {{ http_proxy }}
      - https_proxy = {{ https_proxy }}
      - no_proxy = {{ no_proxy }}

  - name: stop service
    systemd:
      name: "{{ service_name }}"
      state: stopped
    ignore_errors: yes

  - name: create installation directory
    file: path={{ install_dir }} state=directory

  - name: copy fluent-bit
    copy:
      src: "{{ fluentbit_dir }}/"
      dest: "{{ install_dir }}/"

  - name: set execute permission on bin/fluent-bit binary
    file:
      path: "{{ install_dir }}/bin/fluent-bit"
      mode: '0775'

  - name: datalayer configure fluent-bit     "{{ conf_dir }}/component.conf.j2 --> {{ conf_dir }}/component_datalayer.conf"
    template:
      dest: "{{ conf_dir }}/component_datalayer.conf"
      src: "{{ fluentbit_dir }}/conf/component.conf.j2"
    vars:
      logfile: "{{ datalayer_logfile }}"
      tagname: "{{ datalayer_tagname }}"
      parsername: "{{ datalayer_parsername }}"
      indexname: "{{ datalayer_indexname }}"

  - name: nginx configure fluent-bit      "{{ conf_dir }}/component.conf.j2 --> {{ conf_dir }}/component_nginx.conf"
    template:
      dest: "{{ conf_dir }}/component_nginx.conf"
      src: "{{ fluentbit_dir }}/conf/component.conf.j2"
    vars:
      logfile: "{{ nginx_access_logfile }}"
      tagname: "{{ nginx_tagname }}"
      parsername: "{{ nginx_parsername }}"
      indexname: "{{ nginx_indexname }}"
    when: inventory_hostname == nginx_host

  - name: Generate fluent-bit config file      "{{ conf_dir }}/fluent-bit-components.conf.j2 --> {{ conf_dir }}/fluent-bit-components.conf"
    template:
      dest: "{{ conf_dir }}/fluent-bit-components.conf"
      src: "{{ fluentbit_dir }}/conf/fluent-bit-components.conf.j2"

  - name: create run script
    copy:
      mode: '775'
      dest: "{{ install_dir }}/run_fluentbit.sh"
      content: |
        #!/bin/sh
        exec {{ install_dir }}/bin/fluent-bit -c {{ install_dir }}/conf/fluent-bit-components.conf 

  - name: create service script
    copy:
      dest: "{{ service_script }}"
      content: |
        [Unit]
        Description=Microfunctions Fluent-bit Service
        After=network.target
        [Service]
        Type=simple
        WorkingDirectory={{ install_dir }}
        ExecStart={{ install_dir }}/run_fluentbit.sh
        [Install]
        WantedBy=multi-user.target

  - name: systemd install and enable fluent-bit service
    systemd:
      daemon_reload: yes
      name: "{{ service_name }}"
      enabled: true
      state: restarted
    when: start_at_boot|bool

  - name: systemd install and disable fluent-bit service
    systemd:
      daemon_reload: yes
      name: "{{ service_name }}"
      enabled: false
      state: restarted
    when: not start_at_boot|bool

  - name: create start script
    copy:
      mode: '775'
      dest: "{{ install_dir }}/start.sh"
      content: |
        #!/bin/sh
        sudo systemctl start {{ service_name }}

  - name: create stop script
    copy:
      mode: '775'
      dest: "{{ install_dir }}/stop.sh"
      content: |
        #!/bin/sh
        sudo systemctl stop {{ service_name }}
